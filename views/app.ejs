<!DOCTYPE html>
<html lang="en">
<head>
  <title>Padraig & Paulina's Cloud Compuing Project</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet"
        href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.18.1/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.18.1/highlight.min.js"></script>
  <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
  <script>hljs.initHighlightingOnLoad();</script>
  <script type="application/javascript" src="//cdn.rawgit.com/Alorel/console-log-html/master/console-log-html.min.js"></script>
  <style>
    * {
      box-sizing: border-box;
    }

    /* Style the body */
    body {
      font-family: Arial, Helvetica, sans-serif;
      margin: 0;
    }

    /* Header/logo Title */
    .header {
      padding: 80px;
      text-align: center;
      background-image: url("https://i.ibb.co/rmDWD3M/IMG-20200327-195306-EFFECTS.jpg");
      background-size: 100% 100%;
      color: white;
    }

    /* Increase the font size of the heading */
    .header h1 {
      font-size: 40px;
    }

    /* Sticky navbar - toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed). The sticky value is not supported in IE or Edge 15 and earlier versions. However, for these versions the navbar will inherit default position */
    .navbar {
      overflow: hidden;
      background-color: #333;
      position: sticky;
      position: -webkit-sticky;
      top: 0;
    }

    /* Style the navigation bar links */
    .navbar a {
      float: left;
      display: block;
      color: white;
      text-align: center;
      padding: 14px 20px;
      text-decoration: none;
    }


    /* Right-aligned link */
    .navbar a.right {
      float: right;
    }

    /* Change color on hover */
    .navbar a:hover {
      background-color: #ddd;
      color: black;
    }

    /* Active/current link */
    .navbar a.active {
      background-color: #666;
      color: white;
    }

    .navbar form {
      float: left;
      display: block;
      color: white;
      text-align: center;
      padding: 14px 20px;
      text-decoration: none;
    }

    .navbar form.right {
      float: right;
      display: inline;
    }

    /* Change color on hover */
    .navbar form:hover {
      background-color: #ddd;
      color: black;
    }

    /* Active/current link */
    .navbar form.active {
      background-color: #666;
      color: white;
    }

    .link-button {
      background: none;
      border: none;
      color: white;
      cursor: pointer;
      font-size: 1em;
    }
    .link-button:focus {
      outline: none;
    }

    .link-button:hover {
      background-color: #ddd;
      color: black;
    }

    /* Column container */
    .row {
      display: -ms-flexbox; /* IE10 */
      display: flex;
      -ms-flex-wrap: wrap; /* IE10 */
      flex-wrap: wrap;
    }

    /* Create two unequal columns that sits next to each other */
    /* Sidebar/left column */
    .side {
      -ms-flex: 30%; /* IE10 */
      flex: 30%;
      background-color: #ecf1ed;
      padding: 20px;
    }

    /* Main column */
    .main {
      -ms-flex: 70%; /* IE10 */
      flex: 70%;
      background-color: white;
      padding: 20px;
    }

    /* Fake image, just for this example */
    .fakeimg {
      background-color: #aaa;
      width: 100%;
      padding: 20px;
    }

    #host
    {
      width:100%;
      font-size:14pt;
    }

    #topic
    {
      width:100%;
      font-size:14pt;
    }

    /* Footer */
    .footer {
      padding: 20px;
      text-align: center;
      background: #ddd;
    }

    /* Responsive layout - when the screen is less than 700px wide, make the two columns stack on top of each other instead of next to each other */
    @media screen and (max-width: 700px) {
      .row {
        flex-direction: column;
      }
    }

    /* Responsive layout - when the screen is less than 400px wide, make the navigation links stack on top of each other instead of next to each other */
    @media screen and (max-width: 400px) {
      .navbar a {
        float: none;
        width: 100%;
      }
    }
  </style>
</head>
<body>

<div class="header">
  <h1>Cloud Computing Project</h1>
  <p>A <b>graphical</b> AWS IoT Device MQTT Client</p>
</div>

<div class="navbar">
  <form action="/home" method="GET" class="active">
    <button type="submit" class="link-button">Home</button>
  </form>
  <a href="/pages/about.html">About</a>
  <a href="/pages/contact.html">Contact</a>
  <form action="/appJS" method="GET">
    <button type="submit" class="link-button">app.js</button>
  </form>
  <form action="/indexJS" method="GET">
    <button type="submit" class="link-button">index.js</button>
  </form>
  <form action="/loginHTML" method="GET">
    <button type="submit" class="link-button">login.ejs</button>
  </form>
  <form action="/indexHTML" method="GET">
    <button type="submit" class="link-button">index.ejs</button>
  </form>
  <a href="/pages/app.html">app.js</a>
  <form action="/logout?_method=DELETE" metchod="POST" class="right">
    <button type="submit" class="link-button">Log Out</button>
  </form>
</div>

<div class="row">
  <div class="side">
    <h2>Hi <%= name %></h2>
    <h5>Photo of me:</h5>
    <div class="fakeimg" style="height:200px;">Image</div>
    <p>Some text about me in culpa qui officia deserunt mollit anim..</p>
    <h3>More Text</h3>
    <p>Lorem ipsum dolor sit ame.</p>
    <div class="fakeimg" id="input" style="height:60px;">Message received: </div><br>
    <div class="fakeimg" style="height:60px;">Image</div><br>
    <div class="fakeimg" style="height:60px;">Image</div>
  </div>
  <div class="main">
    <h2>Cloud Compuing Project</h2>
    <h5>A graphical AWS IoT MQTT Client, March 31, 2020</h5>
    <pre><code class="javascript">/*
app.js; server file for NodeJS application
    Authors: Padraig O Cosgora, Paulina Osikoya
    Project: AWS IoT

 */const express = require('express')
const app = express()
const passport = require('passport')
const flash = require('express-flash')
const session = require('express-session')
const bodyParser = require('body-parser');
const bcrypt = require('bcrypt');
const cors = require('cors');
const path = require('path');
const morgan = require('morgan');
const methodOverride = require('method-override')
const fileUpload = require('express-fileupload')

const users = []

app.set('port', 3000);
app.use(fileUpload({
  createParentPath: true
}));
app.set('views', __dirname + '/views')
app.set('view-engine', 'ejs')
app.set('view options', { layout: false })
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.urlencoded({ extended: false }))
app.use(cors());
app.use(flash())
app.use(morgan('dev'));
app.use(session({
  secret: "secret",
  resave: false,
  saveUninitialized: false
}))
const initializePassport = require('./passport-config')
initializePassport(
    passport,
    //email => User.find({email: req.body.email}),
    //id => User.find({id: req.body.id})
    email => users.find(user => user.email === email),
    id => users.find(user => user.entry === id)
)
app.use(passport.initialize())
app.use(passport.session())
app.use(methodOverride('_method'))

const indexRouter = require('./routes/index')
app.use("/", indexRouter)
app.use("/login", indexRouter)
app.use("/logout", indexRouter)
app.use("/upload", indexRouter)
app.use("/getMessage", indexRouter)
//app.use(express.static('/public'))
app.use(express.static(path.join(__dirname, 'public')));
//app.use('/static', express.static(path.join(__dirname, '/pages')))


//app.use('/about', indexRouter);
//app.use('/contact', express.static(path.join(__dirname, 'public/pages')));

var Account = require("./models/account")

app.post('/register', checkNotAuthenticated, async (req, res) => {
  try {
    const hashedPassword = await bcrypt.hash(req.body.password, 10)
    var entry = Date.now().toString();
    await Account.create({
          id: entry,
          name: req.body.name,
          email: req.body.email,
          password: hashedPassword},
        function(err){
          if (err) {
            console.log(err);
            return;
          }
          req.flash('info', 'Successful Registration');
          res.redirect('/login')
        });
    users.push({
      entry: entry,
      name: req.body.name,
      email: req.body.email,
      password: hashedPassword
    })
  } catch {
    req.flash('info', 'Unsuccessful Registration');
    res.redirect('/login')
  }
})

function checkNotAuthenticated(req, res, next) {
  if (req.isAuthenticated()) {
    return res.redirect('/')
  }
  next()
}

app.listen(app.get('port'), function(){
  //console.log(("Express server listening on port " + app.get('port')))
    console.log("Express server listening on port 3000")
});

module.exports = app;
</code></pre>
  </div>
</div>
<div class="footer">
  <h2>Footer</h2>
</div>
<script>
  setInterval(function() {
    updateMessage();
  }, 5000);
  $(document).ready(function(){
    $("#submitBtn").click(function(){
      $("#myForm").submit(); // Submit the form
    });
  });
  $(document).ready(function(){
    $("#dashButton").click(function(){
      $.getScript("mqtt.js");
    });
  });
  function updateMessage() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        document.getElementById("input").innerHTML = "Message received: " + this.responseText;
      }
    };
    xhttp.open("POST", "/getMessage", true);
    xhttp.send();
  }
</script>
</body>
</html>
